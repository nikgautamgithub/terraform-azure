trigger: none

pool:
  vmImage: "windows-latest"

variables:
  - group: AzureCredentials
  - name: OUTPUT_FOLDER
    value: "tfvars"

jobs:
  - job: GenerateMatrix
    displayName: "Generate tfvars files and dynamic matrix"
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.x"
          addToPath: true
      - script: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          python scripts/parse_csv.py csv/$(INPUT_CSV) $(OUTPUT_FOLDER)
        displayName: "Setup Python and Generate tfvars"

      - powershell: |
          $matrix = python scripts/generate_matrix.py
          Write-Host "##vso[task.setvariable variable=TFVARS_MATRIX;isOutput=true]$matrix"
        name: setMatrix
        displayName: "Generate dynamic matrix"

      - publish: $(OUTPUT_FOLDER)
        artifact: tfvars

  - job: ProcessTerraform
    displayName: "Process Terraform Workspaces"
    dependsOn: GenerateMatrix
    variables:
      TFVARS_MATRIX: $[ dependencies.GenerateMatrix.outputs['setMatrix.TFVARS_MATRIX'] ]
    strategy:
      matrix: $[ variables.TFVARS_MATRIX ]
    steps:
      - download: current
        artifact: tfvars

      - task: TerraformInstaller@1
        inputs:
          terraformVersion: "latest"

      - powershell: |
          terraform init `
            -backend-config="storage_account_name=bondastorage" `
            -backend-config="container_name=terrformstatecontainer" `
            -backend-config="resource_group_name=my-rg" `
            -backend-config="key=$(TFVARS_FILE).tfstate" `
            -backend-config="subscription_id=$(storage_subscription_id)" `
            -backend-config="tenant_id=$(tenant_id)" `
            -backend-config="client_id=$(client_id)" `
            -backend-config="client_secret=$(client_secret)"

        displayName: "Initialize Terraform"

      - powershell: |
          $ErrorActionPreference = 'Stop'
          terraform plan `
            -var-file="$(Pipeline.Workspace)/tfvars/$(TFVARS_FILE).tfvars" `
            -out=tfplan
        displayName: "Terraform Plan"
        env:
          TF_VAR_tenant_id: $(tenant_id)
          TF_VAR_client_id: $(client_id)
          TF_VAR_client_secret: $(client_secret)

      - powershell: |
          $ErrorActionPreference = 'Stop'
          terraform apply -auto-approve tfplan
        displayName: "Terraform Apply"
        env:
          TF_VAR_tenant_id: $(tenant_id)
          TF_VAR_client_id: $(client_id)
          TF_VAR_client_secret: $(client_secret)
